#+TITLE: Autonomous agents in SDL

#+CAPTION: Build Status
#+NAME: travis-ci-build
[[https://travis-ci.org/gagbo/flocking_sdl][https://travis-ci.org/gagbo/flocking_sdl.svg?branch=master]]
#+CAPTION: Code Coverage
#+NAME: codecov
[[https://codecov.io/gh/gagbo/flocking_sdl][https://codecov.io/gh/gagbo/flocking_sdl/branch/master/graph/badge.svg]]

* What is this ?
This is a port of the [[https://github.com/gagbo/Flocking][Flocking project]]
I started in Qt. For learning
purposes, I now feel like using SDL is better than using the Qt graphics
pipeline I don't totally understand now. Also, it will provide an easy way to
compare implementations.

The project is still very "dirty" as I use this as a playground while
discovering SDL capabilities. As such, for the time being issues and PR
I did not author will be ignored, and pushes will be made to master until
a working version of the project is reached (i.e. a working swarm of ants
as in [[https://github.com/gagbo/Flocking][Flocking]] )

* Dependencies
  - Eigen3 for linear algebra
  - SDL2 for the renderer
  - SDL2_image

* How to play with it
The current CMake configuration overrides the default install location,
so there are no system implications about making the install target.

#+BEGIN_SRC bash
mkdir build && cd build
cmake ..
make install
./install/bin/flocks
#+END_SRC

** Add new ant templates
   See the templates already done (either in =data= directory from the sources, or
   in =install_directory/data/entity= for the installed ones). Currently you can use
   schema_ant.json to validate a template so the code will not bug when trying to read it.

   Currently the only way to access these json is to hard-code them in the main function (calling
   #+BEGIN_SRC cpp
   World::add_entity(json_name.json, pos_x = random, pos_y = random, vel_x = 0, vel_y = 0);
   #+END_SRC
   The objective is to eventually replace the =json_name.json= argument by something read from
   another JSON file, describing "World events" (when read by the program from stdin / file),
   or simply from a menu (Although menus and clickable UIs are much better done in Qt, so I
   will probably only implement a JSON interface through command-line arguments for this
   project).

   TODO : Use JSON to give an event list to the World so we can add/destroy agents as we want. (in
   =user_input/json_events=)
   TODO : Add Food json schema and default types
